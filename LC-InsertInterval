class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {

        vector<vector<int>> result;
        int i = 0, n = intervals.size();

        //Adding all intervals in which the 'high' value is still lower than 'low' value of newInterval.
        while(i < n && intervals[i][1] < newInterval[0]) result.push_back(intervals[i++]);

        vector<int>temp = newInterval;

        //Carefully merging the intervals where the 'low' value of current set is either less than or equal to the 'high' value of newInterval. Reconstructing value of temp again which is the optimized set to be added to res.
        while(i < n && intervals[i][0] <= newInterval[1]) 
        {
            temp[0] = min(temp[0], intervals[i][0]);
            temp[1] = max(temp[1], intervals[i++][1]);
           
        }

        
        result.push_back(temp);

        //Adding remaining of the sets now.
        while(i < n)
        {
            result.push_back(intervals[i++]);
        }

        return result;





        
    }
};
